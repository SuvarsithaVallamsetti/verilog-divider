`timescale 1ns / 1ps


module restoring_divider_32bit (
    input wire clk,
    input wire rst,
    input wire start,
    input wire [31:0] dividend,
    input wire [31:0] divisor,
    output reg [31:0] quotient,
    output reg [31:0] remainder,
    output reg done
);

    reg [63:0] AQ;
    reg [31:0] M;
    reg [5:0] count;
    reg active;

    reg [63:0] AQ_shifted;
    reg [63:0] AQ_next;
    reg [31:0] A_temp;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            AQ <= 64'd0;
            M <= 32'd0;
            count <= 6'd0;
            quotient <= 32'd0;
            remainder <= 32'd0;
            done <= 0;
            active <= 0;
        end else begin
            if (start) begin
                AQ <= {32'd0, dividend}; // A = 0, Q = dividend
                M <= divisor;
                count <= 6'd32;
                done <= 0;
                active <= 1;
            end else if (active) begin
                AQ_shifted = AQ << 1;
                A_temp = AQ_shifted[63:32] - M;

                if (A_temp[31] == 1'b1) begin
                    AQ_next = {AQ_shifted[63:1], 1'b0}; // Negative
                end else begin
                    AQ_next = {A_temp, AQ_shifted[31:1], 1'b1}; // Positive
                end

                AQ <= AQ_next;
                count <= count - 1;

                if (count == 1) begin
                    active <= 0;
                    done <= 1;
                    quotient <= AQ_next[31:0];
                    remainder <= AQ_next[63:32];
                end
            end
        end
    end

endmodule
